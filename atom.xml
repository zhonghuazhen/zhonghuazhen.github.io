<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhonghuazhen博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-30T01:17:42.276Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhonghuazhen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android一次申请多个权限</title>
    <link href="http://yoursite.com/2019/05/30/Android%E4%B8%80%E6%AC%A1%E7%94%B3%E8%AF%B7%E5%A4%9A%E4%B8%AA%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2019/05/30/Android一次申请多个权限/</id>
    <published>2019-05-30T01:17:06.000Z</published>
    <updated>2019-05-30T01:17:42.276Z</updated>
    
    <content type="html"><![CDATA[<p>最近在搞一个闹钟，需要读取本地的音乐来设置响铃，一切准备就绪后在手机上测试时，程序出现闪退，然后想起是没有给读写文件的权限，所以在设置里给程序授予了读写的权限，但由于要不断修改程序，所以每测试一次程序都要去授权，如果采用手动去授权的话会比较麻烦，所以采用自动获取的方式。方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">     </span><br><span class="line">@public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">Override</span><br><span class="line">   protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">       super.onCreate(savedInstanceState);</span><br><span class="line">       setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">       //获取权限</span><br><span class="line">       <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= 23) &#123;//6.0才用动态权限</span><br><span class="line">           initPermission();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   //获取权限</span><br><span class="line">   //申请两个权限，唤醒和文件读写</span><br><span class="line">   //1、首先声明一个数组permissions，将需要的权限都放在里面</span><br><span class="line">   String[] permissions = new String[]&#123;Manifest.permission.WAKE_LOCK,</span><br><span class="line">           Manifest.permission.READ_EXTERNAL_STORAGE&#125;;</span><br><span class="line">   //2、创建一个mPermissionList，逐个判断哪些权限未授予，未授予的权限存储到mPerrrmissionList中</span><br><span class="line">   List&lt;String&gt; mPermissionList = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   private final int mRequestCode = 100;//权限请求码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //权限判断和申请</span><br><span class="line">   private void <span class="function"><span class="title">initPermission</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">       mPermissionList.clear();//清空没有通过的权限</span><br><span class="line"></span><br><span class="line">       //逐个判断你要的权限是否已经通过</span><br><span class="line">       <span class="keyword">for</span> (int i = 0; i &lt; permissions.length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (ContextCompat.checkSelfPermission(this, permissions[i]) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">               mPermissionList.add(permissions[i]);//添加还未授予的权限</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //申请权限</span><br><span class="line">       <span class="keyword">if</span> (mPermissionList.size() &gt; 0) &#123;//有权限没有通过，需要申请</span><br><span class="line">           ActivityCompat.requestPermissions(this, permissions, mRequestCode);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           //说明权限都已经通过，可以做你想做的事情去</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   //请求权限后回调的方法</span><br><span class="line">   //参数： requestCode  是我们自己定义的权限请求码</span><br><span class="line">   //参数： permissions  是我们请求的权限名称数组</span><br><span class="line">   //参数： grantResults 是我们在弹出页面后是否允许权限的标识数组，数组的长度对应的是权限名称数组的长度，数组的数据0表示允许权限，-1表示我们点击了禁止权限</span><br><span class="line">   @Override</span><br><span class="line">   public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,</span><br><span class="line">                                          @NonNull int[] grantResults) &#123;</span><br><span class="line">       super.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">       boolean hasPermissionDismiss = <span class="literal">false</span>;//有权限没有通过</span><br><span class="line">       <span class="keyword">if</span> (mRequestCode == requestCode) &#123;</span><br><span class="line">           <span class="keyword">for</span> (int i = 0; i &lt; grantResults.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (grantResults[i] == -1) &#123;</span><br><span class="line">                   hasPermissionDismiss = <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           //如果有权限没有被允许</span><br><span class="line">           <span class="keyword">if</span> (hasPermissionDismiss) &#123;</span><br><span class="line">               showPermissionDialog();//跳转到系统设置权限页面，或者直接关闭页面，不让他继续访问</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               //全部权限通过，可以进行下一步操作。。。</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 不再提示权限时的展示对话框</span><br><span class="line">    */</span><br><span class="line">   AlertDialog mPermissionDialog;</span><br><span class="line">   String mPackName = <span class="string">"com.example.administrator.alarmclock"</span>;</span><br><span class="line"></span><br><span class="line">   private void <span class="function"><span class="title">showPermissionDialog</span></span>() &#123;</span><br><span class="line">       <span class="keyword">if</span> (mPermissionDialog == null) &#123;</span><br><span class="line">           mPermissionDialog = new AlertDialog.Builder(this)</span><br><span class="line">                   .setMessage(<span class="string">"已禁用权限，是否确定授予权限"</span>)</span><br><span class="line">                   .setPositiveButton(<span class="string">"确定"</span>, new DialogInterface.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</span><br><span class="line">                       @Override</span><br><span class="line">                       public void onClick(DialogInterface dialog, int <span class="built_in">which</span>) &#123;</span><br><span class="line">                           cancelPermissionDialog();</span><br><span class="line"></span><br><span class="line">                           Uri packageURI = Uri.parse(<span class="string">"package:"</span> + mPackName);</span><br><span class="line">                           Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, packageURI);</span><br><span class="line">                           startActivity(intent);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;)</span><br><span class="line">                   .setNegativeButton(<span class="string">"取消"</span>, new DialogInterface.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</span><br><span class="line">                       @Override</span><br><span class="line">                       public void onClick(DialogInterface dialog, int <span class="built_in">which</span>) &#123;</span><br><span class="line">                           //关闭页面或者做其他操作</span><br><span class="line">                           cancelPermissionDialog();</span><br><span class="line"></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;)</span><br><span class="line">                   .create();</span><br><span class="line">       &#125;</span><br><span class="line">       mPermissionDialog.show();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   //关闭对话框</span><br><span class="line">   private void <span class="function"><span class="title">cancelPermissionDialog</span></span>() &#123;</span><br><span class="line">       mPermissionDialog.cancel();</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>可以将获取权限的方法放在需要权限的类里面，这个没有限制的，不一定要放在MainActivity里面。代码是参考<a href="https://blog.csdn.net/wenzhi20102321/article/details/80487975里面的。" target="_blank" rel="noopener">https://blog.csdn.net/wenzhi20102321/article/details/80487975里面的。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在搞一个闹钟，需要读取本地的音乐来设置响铃，一切准备就绪后在手机上测试时，程序出现闪退，然后想起是没有给读写文件的权限，所以在设置里给程序授予了读写的权限，但由于要不断修改程序，所以每测试一次程序都要去授权，如果采用手动去授权的话会比较麻烦，所以采用自动获取的方式。方法
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android调用本机摄像机</title>
    <link href="http://yoursite.com/2019/04/28/Android%E8%B0%83%E7%94%A8%E6%9C%AC%E6%9C%BA%E6%91%84%E5%83%8F%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/04/28/Android调用本机摄像机/</id>
    <published>2019-04-28T13:43:40.000Z</published>
    <updated>2019-04-28T14:33:13.763Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android无法调用本机摄像机"><a href="#Android无法调用本机摄像机" class="headerlink" title="Android无法调用本机摄像机"></a>Android无法调用本机摄像机</h3><p>由于Android有一个作业是要调用真机中的摄像机去拍照、录视频，所以就写了一下相机的调用，照着老师的资料写完之后，无法调用真机中的相机功能，并且还出现了闪退的状况，在对比了多次代码和百度后，发现是由于没有在真机中给予软件调用摄像机的权限，所以不能调用，在给予了权限后，就可以正常使用了。对于无法调用真机中的摄像，可能是由以下的原因导致的：<br>1.java方法没写对<br>2.AndroidManifest.xml中没有给权限<br>3.真机中没有给权限<br>第一点就不说了，百度查看调用方法即可。主要讲一下第二点和第三点。</p><h3 id="AndroidManifest-xml中没有给权限"><a href="#AndroidManifest-xml中没有给权限" class="headerlink" title="AndroidManifest.xml中没有给权限"></a>AndroidManifest.xml中没有给权限</h3><a id="more"></a><p>因为使用了摄像头和存储卡，所以需要添加相应的权限：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用外部存储卡的权限 --&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span><br><span class="line">&lt;!-- 使用摄像头的权限 --&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.CAMERA"</span> /&gt;</span><br></pre></td></tr></table></figure></p><h3 id="真机需要给予权限"><a href="#真机需要给予权限" class="headerlink" title="真机需要给予权限"></a>真机需要给予权限</h3><p>Google在 Android 6.0 开始引入了权限申请机制，将所有权限分成了正常权限和危险权限。应用的相关功能每次在使用危险权限时需要动态的申请并得到用户的授权才能使用。所以需要写方法去申请获取权限。由于我是看老师的资料写的相机，感觉他的资料是很久的了，所以并没有提到要写方法去获取权限，只是说要在AndroidManifest.xml中添加权限而已。在不修改代码的情况下，我们可以在真机中执行如下操作：设置-&gt;授权管理-&gt;应用权限管理-&gt;你要测试的软件-&gt;相机（允许）-&gt;读写手机存储（允许）。<br>执行如上操作后应该就可以了，不过这样是有缺点的，当修改代码，然后在真机上运行时，由于会删除原先的测试案例，然后再重新安装，所以这个时候就需要再次在真机中给予权限了，所以这个方法并不是很好，可以在代码中编写方法，这样在打开软件时，自动弹出来让我们去授权，这个可以去百度查找，有很多的例子。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android无法调用本机摄像机&quot;&gt;&lt;a href=&quot;#Android无法调用本机摄像机&quot; class=&quot;headerlink&quot; title=&quot;Android无法调用本机摄像机&quot;&gt;&lt;/a&gt;Android无法调用本机摄像机&lt;/h3&gt;&lt;p&gt;由于Android有一个作业是要调用真机中的摄像机去拍照、录视频，所以就写了一下相机的调用，照着老师的资料写完之后，无法调用真机中的相机功能，并且还出现了闪退的状况，在对比了多次代码和百度后，发现是由于没有在真机中给予软件调用摄像机的权限，所以不能调用，在给予了权限后，就可以正常使用了。对于无法调用真机中的摄像，可能是由以下的原因导致的：&lt;br&gt;1.java方法没写对&lt;br&gt;2.AndroidManifest.xml中没有给权限&lt;br&gt;3.真机中没有给权限&lt;br&gt;第一点就不说了，百度查看调用方法即可。主要讲一下第二点和第三点。&lt;/p&gt;
&lt;h3 id=&quot;AndroidManifest-xml中没有给权限&quot;&gt;&lt;a href=&quot;#AndroidManifest-xml中没有给权限&quot; class=&quot;headerlink&quot; title=&quot;AndroidManifest.xml中没有给权限&quot;&gt;&lt;/a&gt;AndroidManifest.xml中没有给权限&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>99%的人都理解错了HTTP中GET与POST的区别</title>
    <link href="http://yoursite.com/2019/03/21/99-%E7%9A%84%E4%BA%BA%E9%83%BD%E7%90%86%E8%A7%A3%E9%94%99%E4%BA%86HTTP%E4%B8%ADGET%E4%B8%8EPOST%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/03/21/99-的人都理解错了HTTP中GET与POST的区别/</id>
    <published>2019-03-21T06:51:04.000Z</published>
    <updated>2019-04-07T12:02:51.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h2><p>GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。</p><p>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。</p><p>你可能自己写过无数个GET和POST请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。<br><a id="more"></a><br>当你在面试中被问到这个问题，你的内心充满了自信和喜悦。</p><img src="/2019/03/21/99-的人都理解错了HTTP中GET与POST的区别/1.png"><p>你轻轻松松的给出了一个“标准答案”：</p><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p><p>GET请求只能进行url编码，而POST支持多种编码方式。</p><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p><p>GET请求在URL中传送的参数是有长度限制的，而POST么有。</p><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p><p>GET参数通过URL传递，POST放在Request body中。</p><p>（本标准答案参考自w3schools）</p><p>“很遗憾，这不是我们要的回答！”</p><img src="/2019/03/21/99-的人都理解错了HTTP中GET与POST的区别/2.png"><p>请告诉我真相。。。</p><p>如果我告诉你GET和POST本质上没有区别你信吗？<br>让我们扒下GET和POST的外衣，坦诚相见吧！</p><img src="/2019/03/21/99-的人都理解错了HTTP中GET与POST的区别/3.png"><p>GET和POST是什么？HTTP协议中的两种发送请求的方法。</p><p>HTTP是什么？HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议。</p><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。 </p><p>那么，“标准答案”里的那些区别是怎么回事？<br><img src="/2019/03/21/99-的人都理解错了HTTP中GET与POST的区别/4.png"></p><p>在我大万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p><p>但是，我们只看到HTTP对GET和POST参数的传送渠道（url还是requrest body）提出了要求。“标准答案”里关于参数大小的限制又是从哪来的呢？<br><img src="/2019/03/21/99-的人都理解错了HTTP中GET与POST的区别/5.png"></p><p>在我大万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到哦。</p><p>好了，现在你知道，GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。 </p><p>你以为本文就这么结束了？</p><img src="/2019/03/21/99-的人都理解错了HTTP中GET与POST的区别/6.png"><p>我们的大BOSS还等着出场呢。。。</p><p>这位BOSS有多神秘？当你试图在网上找“GET和POST的区别”的时候，那些你会看到的搜索结果里，从没有提到他。他究竟是什么呢。。。</p><p>GET和POST还有一个重大区别，简单的说：</p><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>长的说：</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p><p>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><p>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。</p><p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p><ol><li><p>GET与POST都有自己的语义，不能随便混用。</p></li><li><p>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</p></li><li><p>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</p></li></ol><p>现在，当面试官再问你“GET与POST的区别”的时候，你的内心是不是这样的？</p><img src="/2019/03/21/99-的人都理解错了HTTP中GET与POST的区别/7.png"><p>文章来源：<a href="http://t.cn/RjLq41J" target="_blank" rel="noopener">http://t.cn/RjLq41J</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GET和POST的区别&quot;&gt;&lt;a href=&quot;#GET和POST的区别&quot; class=&quot;headerlink&quot; title=&quot;GET和POST的区别&quot;&gt;&lt;/a&gt;GET和POST的区别&lt;/h2&gt;&lt;p&gt;GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。&lt;/p&gt;
&lt;p&gt;最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。&lt;/p&gt;
&lt;p&gt;你可能自己写过无数个GET和POST请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>idea的json数据显示问题</title>
    <link href="http://yoursite.com/2019/03/13/idea%E7%9A%84json%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/03/13/idea的json数据显示问题/</id>
    <published>2019-03-13T10:43:25.000Z</published>
    <updated>2019-04-07T12:09:48.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="idea前端调用后台传来的数据"><a href="#idea前端调用后台传来的数据" class="headerlink" title="idea前端调用后台传来的数据"></a>idea前端调用后台传来的数据</h1><p>在学习springmvc的时候，用ajax获取后台的数据，前端输出时，数据显示undefined，在页面也无法显示，通过浏览器debug的时候发现有响应的数据，如下图所示：<br><img src="/2019/03/13/idea的json数据显示问题/1.png"><br>它的输出格式错误了，因为在配置pom.xml时添加了<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.jaxrs&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-jaxrs-xml-provider&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4.1&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>  <img src="/2019/03/13/idea的json数据显示问题/2.png"><p> 导致在使用@RequestMapping时会自动把json数据变成xml文件，所以数据无法正常显示，把这段代码删掉就可以正常显示了。如下图所示：<br><img src="/2019/03/13/idea的json数据显示问题/3.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;idea前端调用后台传来的数据&quot;&gt;&lt;a href=&quot;#idea前端调用后台传来的数据&quot; class=&quot;headerlink&quot; title=&quot;idea前端调用后台传来的数据&quot;&gt;&lt;/a&gt;idea前端调用后台传来的数据&lt;/h1&gt;&lt;p&gt;在学习springmvc的时候，用ajax获取后台的数据，前端输出时，数据显示undefined，在页面也无法显示，通过浏览器debug的时候发现有响应的数据，如下图所示：&lt;br&gt;&lt;img src=&quot;/2019/03/13/idea的json数据显示问题/1.png&quot;&gt;&lt;br&gt;它的输出格式错误了，因为在配置pom.xml时添加了&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>picture1</title>
    <link href="http://yoursite.com/2019/03/09/picture1/"/>
    <id>http://yoursite.com/2019/03/09/picture1/</id>
    <published>2019-03-09T09:22:46.000Z</published>
    <updated>2019-04-07T12:05:06.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h3><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.修改_config.yml,将post_asset_folder改为<span class="literal">true</span>，例如：</span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br><span class="line">当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] &lt;title&gt; 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="相对路径引用的标签插件"><a href="#相对路径引用的标签插件" class="headerlink" title="相对路径引用的标签插件"></a>相对路径引用的标签插件</h3><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></p><p>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <img src="/example.jpg" alt=""> ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）</p><p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure></p><p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>1.将config.yml 文件中的 post_asset_folder 选项设为 true<br>2.通过hexo new aa创建新的文章<br>//执行这条命令，会生成一个与文章相同的文件夹<br>3.将想要放到博客上的图片保存到与文章同名的文件夹中。<br>4.在文章想要显示图片的地方添加<br>//将example.jpg改为自己想要显示的图片；<br>5.更新博客，就可以成功显示自己想要显示的图片了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;文章资源文件夹&quot;&gt;&lt;a href=&quot;#文章资源文件夹&quot; class=&quot;headerlink&quot; title=&quot;文章资源文件夹&quot;&gt;&lt;/a&gt;文章资源文件夹&lt;/h3&gt;&lt;p&gt;对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.修改_config.yml,将post_asset_folder改为&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;，例如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post_asset_folder: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] &amp;lt;title&amp;gt; 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AJAX例子</title>
    <link href="http://yoursite.com/2019/03/09/AJAX%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2019/03/09/AJAX例子/</id>
    <published>2019-03-09T09:04:38.000Z</published>
    <updated>2019-04-07T12:12:57.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="后台："><a href="#后台：" class="headerlink" title="后台："></a>后台：</h3><p>为了更好的了解AJAX，下面使用代码来详细介绍操作：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public class LogincheckServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">          String sname=null;</span><br><span class="line">          Connection conn=null;</span><br><span class="line">    Statement <span class="built_in">stat</span> =null;</span><br><span class="line">        PreparedStatement prep=null;</span><br><span class="line">        ResultSet rs=null;</span><br><span class="line">          String sql=<span class="string">"select count(*) from staff where sname =?"</span>;</span><br><span class="line">          int flag=0;</span><br><span class="line">//1.读取由异步请求对象发送的参数</span><br><span class="line">sname =req.getParameter(<span class="string">"sname"</span>);</span><br><span class="line"></span><br><span class="line">//2.JDBC，查询当前部门名称在数据库中是否已经存在；</span><br><span class="line">            try &#123;</span><br><span class="line">            conn = DataAccess.getConnection();</span><br><span class="line">            //需要自己写DataAccess类，然后在在类里面创建getConnection()方法；</span><br><span class="line">        //执行sql语句</span><br><span class="line">        prep=conn.prepareStatement(sql);</span><br><span class="line">            prep.setString(1, sname);</span><br><span class="line">        rs=prep.executeQuery();</span><br><span class="line">        //处理结果；</span><br><span class="line">        rs.next();</span><br><span class="line">        flag=rs.getInt(<span class="string">"count(*)"</span>);</span><br><span class="line">            </span><br><span class="line">            &#125;catch(Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">/*try &#123;</span><br><span class="line">Thread.sleep(10000);//故意延长异步请求对象工作时间；</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;*/</span><br><span class="line">//3.将判断结果发送给【异步请求对象】</span><br><span class="line">            resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            PrintWriter out=resp.getWriter();</span><br><span class="line">           <span class="keyword">if</span> (flag&gt;=1) &#123;</span><br><span class="line">out.print(<span class="string">"正确"</span>);</span><br><span class="line">&#125;</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">           out.println(<span class="string">"用户不存在"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           // System.out.println(<span class="string">"判断结果 "</span>+flag);</span><br><span class="line">//resp.getWriter().<span class="built_in">print</span>(flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"><span class="comment">### 前台：</span></span><br><span class="line">``` bash</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">"user"</span> class=<span class="string">"label"</span>&gt;Username&lt;/label&gt;</span><br><span class="line">&lt;input id=<span class="string">"user"</span> name=<span class="string">"username"</span> <span class="built_in">type</span>=<span class="string">"text"</span> onblur=<span class="string">"checkSta()"</span> class=<span class="string">"input"</span>&gt;</span><br><span class="line">&lt;font id=<span class="string">"myfont"</span> color=<span class="string">"red"</span>&gt;*&lt;/font&gt;</span><br><span class="line">&lt;!--通过onblur=<span class="string">"checkSta()"</span>调用JavaScript（当鼠标离开这个文本框并点击其它地方时触发）--&gt;</span><br><span class="line">&lt;!--myfont用于显示信息--&gt;</span><br></pre></td></tr></table></figure></p><h3 id="JavaScript方法："><a href="#JavaScript方法：" class="headerlink" title="JavaScript方法："></a>JavaScript方法：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"> <span class="keyword">function</span> checkSta()</span><br><span class="line"> &#123;</span><br><span class="line"> /*</span><br><span class="line"> //方法一：</span><br><span class="line"> </span><br><span class="line">   //1.创建一个异步请求对象</span><br><span class="line">        var xmlHttp=new XMLHttpRequest();</span><br><span class="line">   //2.设置异步请求对象工作状态监听</span><br><span class="line">   xmlHttp.onreadystatechange=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">   <span class="keyword">if</span>(xmlHttp.readyState == 4)</span><br><span class="line">   &#123;</span><br><span class="line">   //从异步请求对象身上得到服务器端返回响应数据</span><br><span class="line">   var data=xmlHttp.responseText;</span><br><span class="line">  //局部刷新效果</span><br><span class="line">  <span class="keyword">if</span>(data &gt;=1)</span><br><span class="line">  &#123;</span><br><span class="line">  document.getElementById(<span class="string">"myfont"</span>).innerText=<span class="string">"正确"</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">  document.getElementById(<span class="string">"myfont"</span>).innerText=<span class="string">"用户不存在"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> //3.初始化异步请求对象；</span><br><span class="line">var param= document.getElementById(<span class="string">"user"</span>).value;</span><br><span class="line"> //xmlHttp.open(<span class="string">"get"</span>,<span class="string">"logincheckServlet?sname="</span>+param,<span class="literal">false</span>);//同步；</span><br><span class="line"> xmlHttp.open(<span class="string">"get"</span>,<span class="string">"logincheckServlet?sname="</span>+param,<span class="literal">true</span>);//异步</span><br><span class="line"> //4.通知异步请求对象发送请求；</span><br><span class="line"> xmlHttp.send();</span><br><span class="line"> </span><br><span class="line"> //5.浏览器执行的命令</span><br><span class="line"> window.alert(<span class="string">"德玛西亚....."</span>);</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line"> //方法二：</span><br><span class="line"> /*$.ajax(&#123;</span><br><span class="line"> <span class="built_in">type</span>:<span class="string">"get"</span>,</span><br><span class="line"> url:<span class="string">"logincheckServlet"</span>,</span><br><span class="line"> data:&#123;sname:$(<span class="string">"#user"</span>).val()&#125;,</span><br><span class="line"> dataType:<span class="string">"text"</span>,</span><br><span class="line"> success:fun1,</span><br><span class="line">error:fun2</span><br><span class="line"> &#125;);</span><br><span class="line"> </span><br><span class="line"> //data就是从异步请求对象取得相应数据</span><br><span class="line"> <span class="keyword">function</span> fun1(data)&#123;</span><br><span class="line"> $(<span class="string">"#myfont"</span>).text(data);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">function</span> fun2()</span><br><span class="line"> &#123;</span><br><span class="line"> alert(<span class="string">"服务端繁忙"</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> */</span><br><span class="line"> //方法三：</span><br><span class="line"> $.get(</span><br><span class="line"> <span class="string">"logincheckServlet"</span>,</span><br><span class="line"> <span class="string">"sname="</span>+$(<span class="string">"#user"</span>).val(),</span><br><span class="line">   fun1</span><br><span class="line"> )</span><br><span class="line"> &#125;</span><br><span class="line"> //data就是从异步请求对象取得相应数据</span><br><span class="line"> <span class="keyword">function</span> fun1(data)&#123;</span><br><span class="line"> $(<span class="string">"#myfont"</span>).text(data);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">function</span> fun2()</span><br><span class="line"> &#123;</span><br><span class="line"> alert(<span class="string">"服务端繁忙"</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&lt;!--一共写了三种方法，需要哪种就把注释去掉，把其它方法注销掉即可--&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h3><p>首页<br><img src="/2019/03/09/AJAX例子/1.png"><br>错误<br><img src="/2019/03/09/AJAX例子/2.png"><br>正确<br><img src="/2019/03/09/AJAX例子/3.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;后台：&quot;&gt;&lt;a href=&quot;#后台：&quot; class=&quot;headerlink&quot; title=&quot;后台：&quot;&gt;&lt;/a&gt;后台：&lt;/h3&gt;&lt;p&gt;为了更好的了解AJAX，下面使用代码来详细介绍操作：&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://yoursite.com/2019/03/09/AJAX/"/>
    <id>http://yoursite.com/2019/03/09/AJAX/</id>
    <published>2019-03-09T07:31:09.000Z</published>
    <updated>2019-04-07T12:03:46.343Z</updated>
    
    <content type="html"><![CDATA[<p>AJAX学习笔记</p><h2 id="AJAX学习"><a href="#AJAX学习" class="headerlink" title="AJAX学习"></a>AJAX学习</h2><h3 id="1-AJAX技术开发步骤："><a href="#1-AJAX技术开发步骤：" class="headerlink" title="1.AJAX技术开发步骤："></a>1.AJAX技术开发步骤：</h3><pre><code>1.在浏览器内存中，创建一个【异步请求对象】2.为【异步请求对象】设置【工作状态监听器】，来帮助浏览器在  何时的时机从【异步请求对象】读取服务端返回的响应的数据。3.初始化【异步请求对象】，（请求方式（post/get），请求地址，同步或异步标识）4.命令（异步请求对象）发送请求。5.通过（工作状态监听器），在何时时机得到（工作状态监听器）返回的数据  对浏览器指定的标签内容进行更新，从而实现【局部刷新效果】</code></pre><a id="more"></a><h3 id="2-AJAX命令实现："><a href="#2-AJAX命令实现：" class="headerlink" title="2.AJAX命令实现："></a>2.AJAX命令实现：</h3><pre><code>1.        var xmlHttp  = new XMLHttpRequest();2.       xmlHttp.onreadystatechange = function(){                                     if(xmlHttp.readyState==4){                                           var  响应数据  = xmlHttp.responseText                                              dom对象.value= 响应数据;局部刷新                                                }                                           };3.xmlHttp.open(&quot;get&quot;,&quot;/myweb/one&quot;,true);4.xmlHttp.send();</code></pre><h3 id="3-AJAX中state和readyState的值的含义："><a href="#3-AJAX中state和readyState的值的含义：" class="headerlink" title="3.AJAX中state和readyState的值的含义："></a>3.AJAX中state和readyState的值的含义：</h3><pre><code>0：请求未初始化（还没有调用 open()）。1：请求已经建立，但是还没有发送（还没有调用 send()）。2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。4：响应已完成；您可以获取并使用服务器的响应了。</code></pre><h3 id="4-readyState值的含义："><a href="#4-readyState值的含义：" class="headerlink" title="4.readyState值的含义："></a>4.readyState值的含义：</h3><pre><code>等于1：说明请求已经准备好可以发送等于2：服务器正在处理请求时会作出响应，响应首部提供了有关响应的信息，并提供一个状态码。等于3：数据下载到请求对象，但是响应数据还没有完全准备好，还不能使用等于4：服务器处理完请求，数据可以使用了</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AJAX学习笔记&lt;/p&gt;
&lt;h2 id=&quot;AJAX学习&quot;&gt;&lt;a href=&quot;#AJAX学习&quot; class=&quot;headerlink&quot; title=&quot;AJAX学习&quot;&gt;&lt;/a&gt;AJAX学习&lt;/h2&gt;&lt;h3 id=&quot;1-AJAX技术开发步骤：&quot;&gt;&lt;a href=&quot;#1-AJAX技术开发步骤：&quot; class=&quot;headerlink&quot; title=&quot;1.AJAX技术开发步骤：&quot;&gt;&lt;/a&gt;1.AJAX技术开发步骤：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1.在浏览器内存中，创建一个【异步请求对象】
2.为【异步请求对象】设置【工作状态监听器】，来帮助浏览器在
  何时的时机从【异步请求对象】读取服务端返回的响应的数据。
3.初始化【异步请求对象】，（请求方式（post/get），请求地址，同步或异步标识）
4.命令（异步请求对象）发送请求。
5.通过（工作状态监听器），在何时时机得到（工作状态监听器）返回的数据
  对浏览器指定的标签内容进行更新，从而实现【局部刷新效果】
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/02/28/hello-world/"/>
    <id>http://yoursite.com/2019/02/28/hello-world/</id>
    <published>2019-02-28T00:22:25.995Z</published>
    <updated>2019-04-07T12:04:26.487Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo的使用</title>
    <link href="http://yoursite.com/2019/02/25/hexo/"/>
    <id>http://yoursite.com/2019/02/25/hexo/</id>
    <published>2019-02-25T00:37:57.000Z</published>
    <updated>2019-04-07T12:04:50.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo创建新的文章"><a href="#hexo创建新的文章" class="headerlink" title="hexo创建新的文章"></a>hexo创建新的文章</h1><p>hexo new aa<br>//aa指的是保存新建文章的MD文件，输入完指令，等指令执行完，生成一个aa.md文件后，去本地保存博客的地方E:\博客\test\source_posts（根据个人情况修改），可以使用记事本打开，有sublime的话使用sublime打开更好，格式会好看点。里面的内容百度查找格式。</p><h1 id="在github上更新新的文章"><a href="#在github上更新新的文章" class="headerlink" title="在github上更新新的文章"></a>在github上更新新的文章</h1><a id="more"></a><p>1.进入cmd<br>2.进入保存博客的地址，例如：cd E:\博客\test，根据个人情况修改。<br>3.hexo clean<br>4.hexo g<br>5.hexo d<br>//如果设置了密码，那么5和6都有输入用户名和密码。<br>6.hexo d -g<br>//执行完上面的指令后，github上面的数据就会被刷新。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo创建新的文章&quot;&gt;&lt;a href=&quot;#hexo创建新的文章&quot; class=&quot;headerlink&quot; title=&quot;hexo创建新的文章&quot;&gt;&lt;/a&gt;hexo创建新的文章&lt;/h1&gt;&lt;p&gt;hexo new aa&lt;br&gt;//aa指的是保存新建文章的MD文件，输入完指令，等指令执行完，生成一个aa.md文件后，去本地保存博客的地方E:\博客\test\source_posts（根据个人情况修改），可以使用记事本打开，有sublime的话使用sublime打开更好，格式会好看点。里面的内容百度查找格式。&lt;/p&gt;
&lt;h1 id=&quot;在github上更新新的文章&quot;&gt;&lt;a href=&quot;#在github上更新新的文章&quot; class=&quot;headerlink&quot; title=&quot;在github上更新新的文章&quot;&gt;&lt;/a&gt;在github上更新新的文章&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL常用指令</title>
    <link href="http://yoursite.com/2019/02/25/SQL/"/>
    <id>http://yoursite.com/2019/02/25/SQL/</id>
    <published>2019-02-25T00:23:49.000Z</published>
    <updated>2019-04-07T12:05:14.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL常用指令记录"><a href="#SQL常用指令记录" class="headerlink" title="SQL常用指令记录"></a>SQL常用指令记录</h1><p>1.java代码获取数据库表里数据的总数</p><p>//先建立数据库连接,执行查询语句<br>Connection conn = DriverManager.getConnection(URL, USER, PassWord);<br>Statement st=conn.createStatement();<br><a id="more"></a><br>ResultSet rs =st.executeQuery(“select count(*) as result from staff”);<br>//staff 代表自己所有查询的表，根据个人的情况修改；<br>//创建变量存取个数<br>int count=0;<br>while(rs.next())<br>{<br>count=getInt(1);<br>}</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQL常用指令记录&quot;&gt;&lt;a href=&quot;#SQL常用指令记录&quot; class=&quot;headerlink&quot; title=&quot;SQL常用指令记录&quot;&gt;&lt;/a&gt;SQL常用指令记录&lt;/h1&gt;&lt;p&gt;1.java代码获取数据库表里数据的总数&lt;/p&gt;
&lt;p&gt;//先建立数据库连接,执行查询语句&lt;br&gt;Connection conn = DriverManager.getConnection(URL, USER, PassWord);&lt;br&gt;Statement st=conn.createStatement();&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客格式</title>
    <link href="http://yoursite.com/2019/01/31/Frist/"/>
    <id>http://yoursite.com/2019/01/31/Frist/</id>
    <published>2019-01-31T11:51:30.000Z</published>
    <updated>2019-04-07T12:04:17.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎使用Markdown编辑器"><a href="#欢迎使用Markdown编辑器" class="headerlink" title="欢迎使用Markdown编辑器"></a>欢迎使用Markdown编辑器</h1><p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。（抄袭CSDN的解释）</p><h2 id="新的改变"><a href="#新的改变" class="headerlink" title="新的改变"></a>新的改变</h2><p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：<br><a id="more"></a></p><ol><li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li><li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li><li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li><li>全新的 <strong>KaTeX数学公式</strong> 语法；</li><li>增加了支持<strong>甘特图的mermaid语法<a href="[mermaid语法说明](https://mermaidjs.github.io/)">^1</a></strong> 功能；</li><li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li><li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li><li>增加了 <strong>检查列表</strong> 功能。</li></ol><h2 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h2><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd></p><h2 id="合理的创建标题，有助于目录的生成"><a href="#合理的创建标题，有助于目录的生成" class="headerlink" title="合理的创建标题，有助于目录的生成"></a>合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p><h2 id="如何改变文本的样式"><a href="#如何改变文本的样式" class="headerlink" title="如何改变文本的样式"></a>如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong></p><p>==标记文本==</p><p><del>删除文本</del></p><blockquote><p>引用文本</p></blockquote><p>H~2~O is是液体。</p><p>2^10^ 运算结果是 1024.</p><h2 id="插入链接与图片"><a href="#插入链接与图片" class="headerlink" title="插入链接与图片"></a>插入链接与图片</h2><p>链接: <a href="https://mp.csdn.net" target="_blank" rel="noopener">link</a>.</p><p>图片: <img src="https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg" alt="Alt"></p><p>带尺寸的图片: <img src="https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg =30x30" alt="Alt"></p><p>居中的图片: <img src="https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center" alt="Alt"></p><p>居中并且带尺寸的图片: <img src="https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center =30x30" alt="Alt"></p><p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p><h2 id="如何插入一段漂亮的代码片"><a href="#如何插入一段漂亮的代码片" class="headerlink" title="如何插入一段漂亮的代码片"></a>如何插入一段漂亮的代码片</h2><p>去<a href="https://mp.csdn.net/configure" target="_blank" rel="noopener">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// An highlighted block</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="生成一个适合你的列表"><a href="#生成一个适合你的列表" class="headerlink" title="生成一个适合你的列表"></a>生成一个适合你的列表</h2><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li style="list-style: none"><input type="checkbox"> 计划任务</li><li style="list-style: none"><input type="checkbox" checked> 完成任务</li></ul><h2 id="创建一个表格"><a href="#创建一个表格" class="headerlink" title="创建一个表格"></a>创建一个表格</h2><p>一个简单的表格是这么创建的：<br>项目     | Value<br>——– | —–<br>电脑  | $1600<br>手机  | $12<br>导管  | $1</p><h3 id="设定内容居中、居左、居右"><a href="#设定内容居中、居左、居右" class="headerlink" title="设定内容居中、居左、居右"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右<br>| 第一列       | 第二列         | 第三列        |<br>|:———–:| ————-:|:————-|<br>| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | </p><h3 id="SmartyPants"><a href="#SmartyPants" class="headerlink" title="SmartyPants"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：<br>|    TYPE   |ASCII                          |HTML<br>|—————-|——————————-|—————————–|<br>|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |’Isn’t this fun?’            |<br>|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |”Isn’t this fun?”            |<br>|Dashes          |<code>-- is en-dash, --- is em-dash</code>|– is en-dash, — is em-dash|</p><h2 id="创建一个自定义列表"><a href="#创建一个自定义列表" class="headerlink" title="创建一个自定义列表"></a>创建一个自定义列表</h2><p>Markdown<br>:  Text-to-HTML conversion tool</p><p>Authors<br>:  John<br>:  Luke</p><h2 id="如何创建一个注脚"><a href="#如何创建一个注脚" class="headerlink" title="如何创建一个注脚"></a>如何创建一个注脚</h2><p>一个具有注脚的文本。<a href="注脚的解释">^2</a></p><h2 id="注释也是必不可少的"><a href="#注释也是必不可少的" class="headerlink" title="注释也是必不可少的"></a>注释也是必不可少的</h2><p>Markdown将文本转换为 HTML。</p><p>*[HTML]:   超文本标记语言</p><h2 id="KaTeX数学公式"><a href="#KaTeX数学公式" class="headerlink" title="KaTeX数学公式"></a>KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/" target="_blank" rel="noopener">KaTeX</a>:</p><p>Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分</p><p>$$<br>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.<br>$$</p><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">here</a>.</p></blockquote><h2 id="新的甘特图功能，丰富你的文章"><a href="#新的甘特图功能，丰富你的文章" class="headerlink" title="新的甘特图功能，丰富你的文章"></a>新的甘特图功能，丰富你的文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section 现有任务</span><br><span class="line">        已完成               :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        进行中               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        计划一               :         des3, after des2, 5d</span><br><span class="line">        计划二               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">这儿</a>,</li></ul><h2 id="UML-图表"><a href="#UML-图表" class="headerlink" title="UML 图表"></a>UML 图表</h2><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">Mermaid</a>. 例如下面产生的一个序列图：:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?</span><br><span class="line">李四--&gt;&gt;王五: 你最近怎么样，王五？</span><br><span class="line">李四--x 张三: 我很好，谢谢!</span><br><span class="line">李四-x 王五: 我很好，谢谢!</span><br><span class="line">Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.</span><br><span class="line"></span><br><span class="line">李四--&gt;&gt;张三: 打量着王五...</span><br><span class="line">张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</span><br></pre></td></tr></table></figure><p>这将产生一个流程图。:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[长方形] -- 链接 --&gt; B((圆))</span><br><span class="line">A --&gt; C(圆角长方形)</span><br><span class="line">B --&gt; D&#123;菱形&#125;</span><br><span class="line">C --&gt; D</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">这儿</a>,</li></ul><h2 id="FLowchart流程图"><a href="#FLowchart流程图" class="headerlink" title="FLowchart流程图"></a>FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flowchat</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure></p><ul><li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">这儿</a>.</li></ul><h2 id="导出与导入"><a href="#导出与导入" class="headerlink" title="导出与导入"></a>导出与导入</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>如果你想加载一篇你写过的.md文件或者.html文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;欢迎使用Markdown编辑器&quot;&gt;&lt;a href=&quot;#欢迎使用Markdown编辑器&quot; class=&quot;headerlink&quot; title=&quot;欢迎使用Markdown编辑器&quot;&gt;&lt;/a&gt;欢迎使用Markdown编辑器&lt;/h1&gt;&lt;p&gt;你好！ 这是你第一次使用 &lt;strong&gt;Markdown编辑器&lt;/strong&gt; 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。（抄袭CSDN的解释）&lt;/p&gt;
&lt;h2 id=&quot;新的改变&quot;&gt;&lt;a href=&quot;#新的改变&quot; class=&quot;headerlink&quot; title=&quot;新的改变&quot;&gt;&lt;/a&gt;新的改变&lt;/h2&gt;&lt;p&gt;我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
